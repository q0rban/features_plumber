<?php
// $Id$

/**
 * @file
 * Features Plumber module.
 */

require_once('features_plumber.crud.inc');

/**
 * Implementation of hook_menu().
 */
function features_plumber_menu() {
  $items = array();

  $items['features-plumber-ahah'] = array(
    'title' => 'Features Plumber AHAH Callback',
    'description' => 'AHAH callback to remove components from a feature.',
    'page callback' => 'features_export_build_form_populate',
    'page arguments' => array(),
    'access callback' => 'user_access',
    'access arguments' => array('administer features'),
    'type' => MENU_CALLBACK,
    'file' => "features.admin.inc",
  );

  return $items;
}

function features_plumber_theme_registry_alter(&$items) {
  $function = $items['features_component_list']['function'];
  $items['features_component_list']['function'] = 'theme_features_plumber_component_list';
  variable_set('features_component_list_theme_function', $function);
}

/**
 * Theme individual components in a component list.
 */
function theme_features_plumber_component_list($components, $source = array(), $conflicts = array()) {
  $function = variable_get('features_component_list_theme_function', 'theme_features_component_list');

  // Check to see if there's a submitted form.
  if (isset($_POST['form_id']) && $_POST['form_id'] == 'features_export_form') {
    if (empty($module_name)) {
      $module_name = $_POST['form_build_id'];
    }
  }

  return $function($components, $source, $conflicts);
  
  $list = array();
  foreach ($components as $component) {
    // If component is not in source list, it was autodetected
    if (!in_array($component, $source)) {
      $list[] = "<span class='features-detected'>". check_plain($component) ."</span>";
    }
    elseif (is_array($conflicts) && in_array($component, $conflicts)) {
      $list[] = "<span class='features-conflict'>". check_plain($component) ."</span>";
    }
    else {
      $list[] = "<span class='features-source'>". check_plain($component) ."</span>";
    }
  }
  foreach ($source as $component) {
    // If a source component is no longer in the items, it was removed because
    // it is provided by a dependency.
    if (!in_array($component, $components)) {
      $list[] = "<span class='features-dependency'>". check_plain($component) ."</span>";
    }
  }
  return "<span class='features-component-list'>". implode(' ', $list) ."</span>";
}

/**
 * Implements hook_form_alter().
 */
function features_plumber_form_features_export_form_alter(&$form, $form_state) {
  dpm($form);
  if (variable_get('features_plumber_hide_component', TRUE)) {
    unset($form['export']['components']['#options']['features_plumber']);
  }

  $feature_name = isset($form['#feature']->name) ? $form['#feature']->name : $form['#build_id'];

  $form['features_plumber']['component_vals'] = array(
    '#type' => 'checkboxes',
    '#options' => _features_plumber_record_options($feature_name),
  );
}

function _features_plumber_record_options($feature) {
  drupal_set_message($feature);
  $return = array();

  foreach (features_plumber_records_load_by_feature($feature) as $name => $record) {
    $return[$name] = $record->component_val;
  }

  return $return;
}

/**
 * Implements hook_features_export_alter().
 */
function features_plumber_features_export_alter(&$export, $module_name) {
  dpm($export, 'Export');

  $cleanup = array();
  foreach (features_plumber_records_load_all() as $name => $record) {
    if (empty($module_name) || $module_name == $record->feature) {
      // If this is a depencency, we need a different part of the $export array.
      if ($record->component == 'dependencies') {
        $array = &$export['dependencies'];
      }
      elseif (isset($export['features'][$record->component])) {
        $array = &$export['features'][$record->component];
      }
      else {
        continue;
      }

      if (_features_plumber_array_search_unset($record->component_val, $array)) {
        $cleanup[$record->component] = TRUE;
      }
    }
  }

  foreach (array_keys($cleanup) as $component) {
    $function = "features_plumber_export_{$component}_cleanup";
    if (function_exists($function)) {
      $function($export, $module_name);
    }
  }
}

/**
 * Cleanup after Views removals.
 */
function features_plumber_export_views_cleanup(&$export) {
  if (empty($export['features']['views'])) {
    unset($export['features']['views_api']);
    _features_plumber_array_search_unset('views', $export['dependencies']);
  }
}

/**
 * Helper function to unset a value from an array, if it exists.
 */
function _features_plumber_array_search_unset($value, &$array) {
  // Now that we have our array, unset as needed.
  $key = array_search($value, $array);
  if ($key !== FALSE) {
    // Since we're unsetting something, we should go through at the end and
    // do any necessary cleanup.
    unset($array[$key]);
    return TRUE;
  }
  return FALSE;
}