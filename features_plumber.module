<?php
// $Id$

/**
 * @file
 * Features Plumber module.
 */

require_once('features_plumber.crud.inc');

/**
 * Implementation of hook_menu().
 */
function features_plumber_menu() {
  $items = array();

  $items['features-plumber-ahah'] = array(
    'title' => 'Features Plumber AHAH Callback',
    'description' => 'AHAH callback to remove components from a feature.',
    'page callback' => 'features_plumber_ahah_callback',
    'page arguments' => array(),
    'access callback' => 'user_access',
    'access arguments' => array('administer features'),
    'file' => "features.admin.inc",
    'file path' => drupal_get_path('module', 'features'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function features_plumber_ahah_callback() {
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];

  if ($form = form_get_cache($form_build_id, $form_state)) {
    $args = $form['#parameters'];
    $form_id = array_shift($args);
    $form_state['post'] = $form['#post'] = $_POST;
    $form['#programmed'] = $form['#redirect'] = FALSE;
    //drupal_process_form($form_id, $form, $form_state);
    dpm($form_state);

    drupal_json(array('status' => TRUE, 'data' => theme('status_messages')));
    exit;
  }
  drupal_json(array('status' => FALSE, 'data' => ''));
  exit;
}

/**
 * Implementation of hook_theme().
 */
function features_plumber_theme() {
  $items = array();

  $items['features_plumber_component_list'] = array();

  return $items;
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Since theme_features_components doesn't pass along the component to 
 * theme_features_component_list, we override the function and do it ourselves.
 */
function features_plumber_theme_registry_alter(&$items) {
  $items['features_components']['function'] = 'theme_features_plumber_components';
}

/**
 * Theme a set of features export components.
 */
function theme_features_plumber_components($info, $sources = array()) {
  $output = '';
  $rows = array();
  $components = features_get_components();
  if (!empty($info['features']) || !empty($info['dependencies']) || !empty($sources)) {
    $export = array_unique(array_merge(
      array_keys($info['features']),
      array_keys($sources),
      array('dependencies')
    ));
    foreach ($export as $component) {
      if ($component === 'dependencies') {
        $feature_items = isset($info[$component]) ? $info[$component] : array();
      }
      else {
        $feature_items = isset($info['features'][$component]) ? $info['features'][$component] : array();
      }
      $source_items = isset($sources[$component]) ? $sources[$component] : array();
      if (!empty($feature_items) || !empty($source_items)) {
        $rows[] = array(array(
          'data' => isset($components[$component]['name']) ? $components[$component]['name'] : $component,
          'header' => TRUE
        ));
        $rows[] = array(array(
          'data' => theme('features_plumber_component_list', $feature_items, $source_items, array(), $component),
          'class' => 'component'
        ));
      }
    }
    $output .= theme('table', array(), $rows);
    $output .= theme('features_component_key');
  }
  return $output;
}

/**
 * Theme individual components in a component list.
 */
function theme_features_plumber_component_list($components, $source = array(), $conflicts = array(), $component) {
  $list = array();

  foreach ($components as $key => $component_val) {
    if (!in_array($component_val, $source)) {
      $id = "$component:$component_val";
      $attributes = array('class' => 'features-detected');
      if (features_plumber_component_is_supported($component)) {
        $attributes['class'] .= ' features-plumber-plumbable';
        $attributes['component'] = $component;
        $attributes['component_val'] = $component_val;
      }
      $list[] = '<span'. drupal_attributes($attributes) .'>'. check_plain($component_val) ."</span>";
    }
    elseif (is_array($conflicts) && in_array($component_val, $conflicts)) {
      $list[] = "<span class='features-conflict'>". check_plain($component_val) ."</span>";
    }
    else {
      $list[] = "<span class='features-source'>". check_plain($component_val) ."</span>";
    }
  }

  foreach ($source as $component_val) {
    // If a source component is no longer in the items, it was removed because
    // it is provided by a dependency.
    if (!in_array($component_val, $components)) {
      $list[] = "<span class='features-dependency'>". check_plain($component_val) ."</span>";
    }
  }

  return "<span class='features-component-list'>". implode(' ', $list) ."</span>";
}

function features_plumber_component_is_supported($component) {
  return in_array($component, features_plumber_supported_components());
}

function features_plumber_supported_components() {
  return array(
    'views',
    'variable',
    'context',
    'content',
    'node',
    'dependencies',
  );
}

function features_plumber_record_form_element($component, $component_val, $label = NULL) {
  return array(
    '#type' => 'checkbox',
    '#default_value' => FALSE, // Backwards!
    '#ahah' => array(
      'path' => 'features-plumber-ahah',
      'wrapper' => 'features-plumber', //'features-export-populated',
    ),
    '#attributes' => array(
      'style' => 'display: none;',
      'component' => $component,
      'component_val' => $component_val,
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function features_plumber_form_features_export_form_alter(&$form, $form_state) {
  dpm($form);
  if (variable_get('features_plumber_hide_component', TRUE)) {
    unset($form['export']['components']['#options']['features_plumber']);
  }

  // Set the feature name to the build id if it doesn't exist.
  $feature_name = isset($form['#feature']->name) ? $form['#feature']->name : $form['#build_id'];
  $records = features_plumber_records_load_by_feature($feature);

  drupal_add_js(drupal_get_path('module', 'features_plumber') .'/features_plumber.js');
  $form['features_plumber']['#tree'] = TRUE;

  foreach ($form['export']['sources'] as $component => $element) {
    if (features_plumber_component_is_supported($component)) {
      foreach ($element['#options'] as $key => $label) {
        $form['features_plumber'][$component][$key] = features_plumber_record_form_element($component, $key, $label);
      }
    }
  }
}

/**
 * Implements hook_features_export_alter().
 */
function features_plumber_features_export_alter(&$export, $module_name) {
  //dpm($export, 'Export');

  if (!isset($module_name)) {
    return;
  }

  $cleanup = array();
  foreach (features_plumber_records_load_by_feature($module_name) as $record) {
    if (empty($module_name) || $module_name == $record->feature) {
      // If this is a depencency, we need a different part of the $export array.
      if ($record->component == 'dependencies') {
        $array = &$export['dependencies'];
      }
      elseif (isset($export['features'][$record->component])) {
        $array = &$export['features'][$record->component];
      }
      else {
        continue;
      }

      if (isset($array[$record->component_val])) {
        unset($array[$record->component_val]);
        $cleanup[$record->component] = TRUE;
        $export['features']['features_plumber'][$record->name] = $record->name;
      }
    }
  }

  if (!isset($export['features']['features_plumber'])) {
    $cleanup['features_plumber'] = TRUE;
  }

  foreach (array_keys($cleanup) as $component) {
    $function = "features_plumber_export_{$component}_cleanup";
    if (function_exists($function)) {
      $function($export, $module_name);
    }
  }
}

/**
 * Cleanup after Views removals.
 */
function features_plumber_export_views_cleanup(&$export) {
  if (empty($export['features']['views'])) {
    unset($export['features']['views'], $export['features']['views_api'], $export['dependencies']['views']);
  }
}

/**
 * Cleanup after Features Plumber removal.
 */
function features_plumber_export_views_cleanup(&$export) {
  unset($export['dependencies']['features_plumber'], $export['features']['ctools']['features_plumber:features_plumber_records:1']);
}

/**
 * Helper function to unset a value from an array, if it exists.
 */
function _features_plumber_array_search_unset($value, &$array) {
  // Now that we have our array, unset as needed.
  $key = array_search($value, $array);
  if ($key !== FALSE) {
    // Since we're unsetting something, we should go through at the end and
    // do any necessary cleanup.
    //unset($array[$key]);
    return TRUE;
  }
  return FALSE;
}