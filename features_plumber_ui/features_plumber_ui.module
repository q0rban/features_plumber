<?php
// $Id: features_plumber_ui.module,v 1.1 2011/01/19 21:16:44 q0rban Exp $

/**
 * @file
 * Features Plumber UI module.
 */

/**
 * Implementation of hook_menu().
 */
function features_plumber_ui_menu() {
  $items = array();

  $items['features-plumber-ui-ahah'] = array(
    'title' => 'Features Plumber AHAH Callback',
    'description' => 'AHAH callback to remove components from a feature.',
    'page callback' => 'features_plumber_ui_form_ahah_callback',
    'access callback' => 'user_access',
    'access arguments' => array('administer features'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/build/features/settings'] = array(
    'title' => 'Settings',
    'description' => 'Modify export settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('features_plumber_ui_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer features'),
    'type' => MENU_LOCAL_TASK,
    'file' => "features_plumber_ui.admin.inc",
    'weight' => 11,
  );

  $items['admin/build/features/settings/export'] = array(
    'title' => 'Export',
    'description' => 'Modify export settings.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function features_plumber_ui_menu_alter(&$items) {
  $items['admin/build/features/export/populate']['page callback'] = 'features_plumber_ui_export_build_form_populate';
}

/**
 * Implements hook_form_alter().
 */
function features_plumber_ui_form_features_export_form_alter(&$form, $form_state) {
  if (variable_get('features_plumber_ui_hide_component', TRUE)) {
    unset($form['export']['components']['#options']['features_plumber']);
  }
  if (isset($form['#feature']->info)) {
    $feature = $form['#feature'];
    $form['export']['features']['#value'] = drupal_get_form('features_plumber_ui_form', $feature->info, $feature->info['features'], $feature->name);
  }
  drupal_add_js(drupal_get_path('module', 'features_plumber_ui') .'/features_plumber_ui.js');
  array_unshift($form['buttons']['submit']['#submit'], 'features_plumber_ui_export_form_submit');
}

/**
 * Submit handler for features_export_form.
 */
function features_plumber_ui_export_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  features_plumber_include('crud');

  foreach (features_plumber_records_load_by_feature($values['form_build_id']) as $record) {
    $record->feature = $values['name'];
    $record->name = features_plumber_generate_name($record->feature, $record->component, $record->component_val);
    features_plumber_record_save($record);
  }
}

/**
 * Replacement callback for features_build_form_populate().
 * @see features_plumber_ui_menu_alter().
 */
function features_plumber_ui_export_build_form_populate() {
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];

  if ($form = form_get_cache($form_build_id, $form_state)) {
    module_load_include('inc', 'features', 'features.export');
    $submitted = $_POST;
    $module_name = isset($form['#feature']->name) ? $form['#feature']->name : $form_build_id;

    $stub = array();

    // Assemble the combined component list
    $components = array_keys(features_get_components());
    foreach ($components as $component) {
      // User-selected components take precedence.
      if (!empty($submitted['sources'][$component])) {
        // Validate and set the default value for each selected option. This
        foreach ($submitted['sources'][$component] as $key => $value) {
          if (isset($form['export']['sources'][$component]['#options'][$key])) {
            $form['export']['sources'][$component]['#default_value'][$key] = $value;
          }
        }
        $stub[$component] = features_dom_decode_options(array_filter($submitted['sources'][$component]));
      }
      // Only fallback to an existing feature's values if there are no export options for the component.
      else if (!isset($form['export']['sources'][$component]) && !empty($form['#feature']->info['features'][$component])) {
        $stub[$component] = $form['#feature']->info['features'][$component];
      }
    }

    // Assemble dependencies
    $dependencies = isset($submitted['sources']['dependencies']) ? $submitted['sources']['dependencies'] : array();

    // Generate populated feature
    $export = features_populate($stub, $dependencies, $module_name);
    $output = drupal_get_form('features_plumber_ui_form', $export, $stub, $module_name);

    $form['export']['features']['#value'] = $output;

    // Re-cache form. This ensures that if the form fails to validate, selected
    // values are preserved for the user.
    form_set_cache($submitted['form_build_id'], $form, $form_state);

    $output .= features_plumber_ui_ahah_js();
    $output .= theme('status_messages');

    drupal_json(array('status' => TRUE, 'data' => $output));
    exit;
  }
  drupal_json(array('status' => FALSE, 'data' => ''));
  exit;
}

/**
 * Helper function to pull all the ahah js and output it cleanly.
 */
function features_plumber_ui_ahah_js() {
  // For inline Javascript to validate as XHTML, all Javascript containing
  // XHTML needs to be wrapped in CDATA. To make that backwards compatible
  // with HTML 4, we need to comment out the CDATA-tag.
  $embed_prefix = "\n<!--//--><![CDATA[//><!--\n";
  $embed_suffix = "\n//--><!]]>\n";
  $js = drupal_add_js();
  $data = $js['setting'];
  $output = '';

  foreach ($data as $key => $value) {
    if (!isset($value['ahah'])) {
      unset($data[$key]);
    }
  }

  if (!empty($data)) {
    $output = '<script type="text/javascript">';
    $output .= $embed_prefix;
    $output .= 'jQuery.extend(Drupal.settings, ';
    $output .= drupal_to_js(call_user_func_array('array_merge_recursive', $data));
    $output .= ");";
    $output .= $embed_suffix;
    $output .= "</script>\n";
  }

  return $output;
}

/**
 * Form of checkboxes for each detected component.
 */
function features_plumber_ui_form($form_state, $export, $stub, $feature) {
  $form = array();
  $form['features_plumber_ui']['#tree'] = TRUE;

  $form['#feature'] = $feature;

  $form['ahah-results'] = array(
    '#type' => 'markup',
    '#value' => '<div id="features-plumber-ui-ahah-results">&nbsp;</div>',
  );

  $components = $export['features'];
  $components['dependencies'] = $export['dependencies'];

  features_plumber_include('crud');
  $records = features_plumber_records_load_by_feature($feature);

  foreach ($components as $component => $component_vals) {
    if (features_plumber_component_is_supported($component)) {
      foreach ($component_vals as $component_val) {
        // We only want detected items, not selected ones.
        if (!in_array($component_val, $stub[$component])) {
          $name = features_plumber_generate_name($feature, $component, $component_val);
          $form['features_plumber_ui'][$component][$component_val] = array(
            '#type' => 'checkbox',
            '#default_value' => !isset($records[$name]), // Backwards!
            '#ahah' => array(
              'path' => 'features-plumber-ui-ahah',
              'wrapper' => 'features-plumber-ui-ahah-results', //'features-export-populated',
            ),
            '#attributes' => array(
              'component' => $component,
              'component_val' => $component_val,
            ),
          );
        }
      }
    }
  }

  $form['components'] = array(
    '#type' => 'markup',
    '#value' => theme('features_plumber_ui_components', $export, $stub),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#attributes' => array(
      'style' => 'display: none;',
    ),
  );

  return $form;
}

/**
 * AHAH callback for features_plumber_ui_form() checkboxes.
 */
function features_plumber_ui_form_ahah_callback() {
  $form_state = array('storage' => NULL, 'submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];

  if ($form = form_get_cache($form_build_id, $form_state)) {
    features_plumber_include('crud');

    $args = $form['#parameters'];
    $form_id = array_shift($args);
    $form['#post'] = $_POST;
    $form['#redirect'] = FALSE;
    $form['#programmed'] = FALSE;
    $form_state['post'] = $_POST;
    drupal_process_form($form_id, $form, $form_state);

    if (isset($form['#feature']) && is_string($form['#feature']) && $feature = $form['#feature']) {
      foreach ($form_state['values']['features_plumber_ui'] as $component => $array) {
        foreach ($array as $component_val => $keep) {
          $t_args = array(
            '@feature' => $feature,
            '@component' => $component,
            '@component-val' => $component_val,
          );

          if (!$keep) {
            features_plumber_record_create($feature, $component, $component_val);
          }
          else {
            // Ensure other records have been deleted.
            features_plumber_record_delete($feature, $component, $component_val);
          }
        }
      }
      $form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
      drupal_json(array('status' => TRUE, 'data' => theme('status_messages')));
      exit;
    }
  }
  drupal_json(array('status' => FALSE, 'data' => ''));
  exit;
}

/**
 * Implementation of hook_theme().
 */
function features_plumber_ui_theme() {
  $items = array();

  $items['features_plumber_ui_components'] = 
  $items['features_plumber_ui_component_list'] = array();

  return $items;
}

function features_plumber_ui_theme_registry_alter(&$items) {
  $items['features_components']['function'] = 'theme_features_plumber_ui_components';
}

/**
 * Theme a set of features export components.
 */
function theme_features_plumber_ui_components($info, $sources = array()) {
  $output = '';
  $rows = array();
  $components = features_get_components();
  if (!empty($info['features']) || !empty($info['dependencies']) || !empty($sources)) {
    $export = array_unique(array_merge(
      array_keys($info['features']),
      array_keys($sources),
      array('dependencies')
    ));
    foreach ($export as $component) {
      if ($component === 'dependencies') {
        $feature_items = isset($info[$component]) ? $info[$component] : array();
      }
      else {
        $feature_items = isset($info['features'][$component]) ? $info['features'][$component] : array();
      }
      $source_items = isset($sources[$component]) ? $sources[$component] : array();
      if (!empty($feature_items) || !empty($source_items)) {
        $rows[] = array(array(
          'data' => isset($components[$component]['name']) ? $components[$component]['name'] : $component,
          'header' => TRUE
        ));
        $rows[] = array(array(
          'data' => theme('features_plumber_ui_component_list', $feature_items, $source_items, array(), $component),
          'class' => 'component'
        ));
      }
    }
    $output .= theme('table', array(), $rows);
    $output .= theme('features_component_key');
  }
  return $output;
}

/**
 * Theme individual components in a component list.
 */
function theme_features_plumber_ui_component_list($components, $source = array(), $conflicts = array(), $component) {
  $list = array();

  foreach ($components as $key => $component_val) {
    if (!in_array($component_val, $source)) {
      $id = "$component:$component_val";
      $attributes = array('class' => 'features-detected');
      if (features_plumber_component_is_supported($component)) {
        $attributes['class'] .= ' features-plumber-ui-plumbable';
        $attributes['component'] = $component;
        $attributes['component_val'] = $component_val;
      }
      $list[] = '<span'. drupal_attributes($attributes) .'>'. check_plain($component_val) ."</span>";
    }
    elseif (is_array($conflicts) && in_array($component_val, $conflicts)) {
      $list[] = "<span class='features-conflict'>". check_plain($component_val) ."</span>";
    }
    else {
      $list[] = "<span class='features-source'>". check_plain($component_val) ."</span>";
    }
  }

  foreach ($source as $component_val) {
    // If a source component is no longer in the items, it was removed because
    // it is provided by a dependency.
    if (!in_array($component_val, $components)) {
      $list[] = "<span class='features-dependency'>". check_plain($component_val) ."</span>";
    }
  }

  return "<span class='features-component-list'>". implode(' ', $list) ."</span>";
}